plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android-extensions'

    // ROOM плагин для работы с аннотациями в Kotlin
    id 'kotlin-kapt'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'

    // FOR FIREBASE
    id 'com.google.gms.google-services'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "jt.projects.gbweatherapp"
        minSdk 29
        targetSdk 32
        versionCode 1
        versionName "1.3"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    //система сборки позволяет указать параметры подписи в конфигурации сборки.
    // Она может автоматически подписывать APK во время процесса сборки.
    // Система сборки подписывает отладочную версию с ключом по умолчанию и сертификатом с использованием известных учетных данных, чтобы избежать запроса пароля во время сборки.
    // Система сборки не подписывает релизную версию, если вы явно не определяете конфигурацию подписи для этой сборки.
    signingConfigs {
        secret {
            Properties properties = new Properties()
            properties.load(rootProject.file("passwordSecret.properties").newDataInputStream())
            def password = properties.getProperty("password")
            storeFile file("secret.jks")
            storePassword = password
            keyAlias 'keyS'
            keyPassword = password
        }

        release {
            Properties properties = new Properties()
            properties.load(rootProject.file("passwordRelease.properties").newDataInputStream())
            def password = properties.getProperty("password")
            storeFile file("release.jks")
            storePassword = password
            keyAlias 'key0'
            keyPassword = password
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }

    // Build Types (типы сборки) определяют свойства, которые Gradle использует при создании и упаковке приложения.
    // Обычно они настраиваются для разных этапов жизненного цикла разработки. Например, тип сборки отладки (debug) включает опции отладки и подписывает APK с помощью отладочного ключа.
    // А тип сборки выпуска (release) может сжимать, обфусцировать и подписывать APK с ключом выпуска для распространения.
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            versionNameSuffix "-release"
        }

        debug {
            versionNameSuffix "-debug"
        }

        secret {
            minifyEnabled false
            versionNameSuffix "-secret"
            signingConfig signingConfigs.secret
            debuggable false
            multiDexEnabled true // подключить больше 65535 используемых методов
        }
    }

    flavorDimensions 'version'
    // Flavors представляют собой различные версии приложения, которые вы можете выпускать пользователям, например бесплатные и платные версии.
    productFlavors {
        PRO {
            dimension 'version'
            buildConfigField "Boolean", "PAID_VERSION", "true"
            versionNameSuffix '.pro'
        }
        FREE {
            dimension 'version'
            buildConfigField "Boolean", "PAID_VERSION", "false"
            versionNameSuffix '.free'
        }
    }

    buildTypes.each {
        Properties properties = new Properties()
        properties.load(project.rootProject.file("apikey.properties").newDataInputStream())
        def apiKey = properties.getProperty("yandex_weather_api_key", "")
        it.buildConfigField "String", "WEATHER_API_KEY", apiKey
    }

}

//система сборки управляет зависимостями проекта от вашей локальной файловой системы и от удаленных репозиториев.
// Это не позволяет вам вручную искать, загружать и копировать двоичные пакеты ваших зависимостей в каталог проекта
dependencies {
    // FOR FIREBASE
    implementation 'com.google.firebase:firebase-messaging-ktx:23.0.6'
    implementation 'androidx.work:work-runtime-ktx:2.7.1'

    // google maps
    implementation 'com.google.android.gms:play-services-maps:18.1.0'


    //Room
    implementation 'androidx.room:room-runtime:2.4.3'
    kapt 'androidx.room:room-compiler:2.4.3'

    // GLIDE
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    // PICASSO
    implementation 'com.squareup.picasso:picasso:2.71828'

    // Coil
    implementation 'io.coil-kt:coil:2.1.0'
    implementation("io.coil-kt:coil-gif:2.1.0")
    implementation("io.coil-kt:coil-svg:2.1.0")

    //Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    //GSON
    implementation 'com.google.code.gson:gson:2.9.0'

    //OkHttp
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'

    // Interceptor (перехватчик http-запросов)
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.2'

    // KOTLIN
    implementation 'androidx.core:core-ktx:1.8.0'

    // DESIGN
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // ViewModel + LiveData
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.5.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.0'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.1'


    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}